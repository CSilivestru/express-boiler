{
  "name": "passport-local-mongoose",
  "description": "Mongoose plugin that simplifies building username and password login with Passport",
  "version": "0.2.1",
  "main": "lib/passport-local-mongoose.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/saintedlama/passport-local-mongoose.git"
  },
  "author": {
    "name": "Christoph Walcher",
    "email": "christoph.walcher@gmail.com"
  },
  "license": "BSD",
  "keywords": [
    "mongoose",
    "passport",
    "authentication",
    "login"
  ],
  "dependencies": {
    "passport-local": "~0.1.6"
  },
  "devDependencies": {
    "mongoose": "3.4.x",
    "mocha": "1.7.x"
  },
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha"
  },
  "readme": "# Passport-Local Mongoose\nPassport-Local Mongoose is a [Mongoose](http://mongoosejs.com/) [plugin](http://mongoosejs.com/docs/plugins.html) \nthat simplifies building username and password login with [Passport](http://passportjs.org).\n\n[![Build Status](https://travis-ci.org/saintedlama/passport-local-mongoose.png?branch=master)](https://travis-ci.org/saintedlama/passport-local-mongoose)\n\n## Installation\n\n    $ npm install passport-local-mongoose\n\nPassport-Local Mongoose does not require `passport`, `passport-local` or `mongoose` dependencies directly but expects you\nto have these dependencies installed.\n\n## Usage\n\n### Plugin Passport-Local Mongoose\nFirst you need to plugin Passport-Local Mongoose into your User schema\n\n    var mongoose = require('mongoose'),\n        Schema = mongoose.Schema,\n        passportLocalMongoose = require('passport-local-mongoose');\n    \n    var User = new Schema({});\n    \n    User.plugin(passportLocalMongoose);\n    \n    module.exports = mongoose.model('User', User);\n\nYou're free to define your User how you like. Passport-Local Mongoose will add a username, hash and salt field to store\nthe username, the hashed password and the salt value.\n\nAdditionally Passport-Local Mongoose adds these methods to your Schema.\n\n#### Instance methods\n* setPassword(password, cb) asynchronous method to set a user's password hash and salt\n* authenticate(password, cb) asynchronous method to authenticate a user instance\n\n#### Static methods\n* authenticate() Generates a function that is used in Passport's LocalStrategy\n* serializeUser() Generates a function that is used by Passport to serialize users into the session\n* deserializeUser() Generates a function that is used by Passport to deserialize users into the session\n* register(user, password, cb) Convenience method to register a new user instance with a given password. Checks if username is unique. See [login example](https://github.com/saintedlama/passport-local-mongoose/tree/master/examples/login).\n* findByUsername() Convenience method to find a user instance by it's unique username.\n\n### Configure Passport/Passport-Local\nYou should configure Passport/Passport-Local as described in [the Passport Guide](http://passportjs.org/guide/configure/).\n\nPassport-Local Mongoose supports this setup by implementing a `LocalStrategy` and serializeUser/deserializeUser functions.\n\nTo setup Passport-Local Mongoose use this code\n\n    // requires the model with Passport-Local Mongoose plugged in\n    var User = require('./models/user');\n    \n    // use static authenticate method of model in LocalStrategy\n    passport.use(new LocalStrategy(User.authenticate()));\n    \n    // use static serialize and deserialize of model for passport session support\n    passport.serializeUser(User.serializeUser());\n    passport.deserializeUser(User.deserializeUser());\n\nMake sure that you have mongoose connected and you're done.\n\n### Options\nWhen plugging in Passport-Local Mongoose plugin additional options can be provided to configure\nthe hashing algorithm.\n\n    User.plugin(passportLocalMongoose, options);\n\nOption keys and defaults\n* saltlen: specifies the salt length in bytes. Default: 32\n* iterations: specifies the number of iterations used in pbkdf2 hashing algorithm. Default: 25000\n* keylen: specifies the length in byte of the generated key. Default: 512\n* usernameField: specifies the field name that holds the username. Defaults to 'username'. This option can be used if you want to use a different \nfield to hold the username for example \"email\".\n* saltField: specifies the field name that holds the salt value. Defaults to 'salt'.\n* hashField: specifies the field name that holds the password hash value. Defaults to 'hash'.\n\n*Attention!* Changing these values for example in a production environment will prevent that existing users can authenticate!\n\n### Hash Algorithm\nPassport-Local Mongoose use the pbkdf2 algorithm of the node crypto library. \n[Pbkdf2](http://en.wikipedia.org/wiki/PBKDF2) was choosen because platform independent \n(in contrary to bcrypt). For every user a generated salt value is saved to make\nrainbow table attacks even harder.\n\n\n### Examples\nFor a complete example implementing a registration, login and logout see the \n[login example](https://github.com/saintedlama/passport-local-mongoose/tree/master/examples/login).",
  "readmeFilename": "README.md",
  "_id": "passport-local-mongoose@0.2.1",
  "dist": {
    "shasum": "1eb497f7880f527ca1461c83701d923f300a30ad"
  },
  "_from": "passport-local-mongoose@>=0.2.0"
}
